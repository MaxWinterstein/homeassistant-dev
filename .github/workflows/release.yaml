name: Bump Version in config.yaml

on:
  issue_comment:
    types: [created]
jobs:
  bump-version:
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '@release-bot') && github.event.comment.user.login == 'MaxWinterstein'
    runs-on: ubuntu-latest

    steps:
      - name: Update comment with workflow URL
        run: |
          # Get the current workflow run URL
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Build the new comment content
          UPDATED_COMMENT="Workflow run triggered! ðŸš€ [View the run here](${RUN_URL})"

          # Use curl to update the comment
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.RENOVATE_ACTION }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }} \
            -d "{\"body\": \"${UPDATED_COMMENT}\"}"
              
      - name: Add ðŸš€ reaction to comment
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.RENOVATE_ACTION }}" \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -d '{"content": "rocket"}' \
            https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get module
        id: get_module
        run: |
          comment_body="${{ github.event.comment.body }}"
          if [[ "$comment_body" =~ @release-bot[[:space:]]([a-zA-Z0-9_-]+) ]]; then
            FILE_NAME="${BASH_REMATCH[1]}"
            echo "File name to create: $FILE_NAME"
            echo "::set-output name=file_name::$FILE_NAME"
          else
            echo "No valid command found"
            exit 1
          fi
            
      - name: Extract version from config.yaml
        id: get_version
        uses: mikefarah/yq@v4.44.3  
        with:
          cmd: yq '.version' ${{ steps.get_module.outputs.file_name }}/config.yaml

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          # Install a specific version of uv.
          version: "0.4.20"

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Build towncrier
        run: uv run towncrier build --dir "${{ steps.get_module.outputs.file_name }}" --version "${{ steps.get_version.outputs.result }}"

      # - name: Fetch all branches
      #   run: |
      #     git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
      # # Install dependencies, like yq for manipulating YAML
      # - name: Install yq
      #   run: sudo apt-get install -y wget && wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64.tar.gz -O - |  tar xz && mv yq_linux_amd64 /usr/bin/yq

      # # Get list of changed files
      # - name: Get list of changed files
      #   id: changed_files
      #   run: |
      #     git diff --name-only origin/main HEAD > changed_files.txt
      #     echo "foo"
      #     cat changed_files.txt
      #     echo "bar"
      #     echo "::set-output name=files::$(cat changed_files.txt)"

      # # Find all the config.yaml files and check for changes in neighboring files
      # - name: Find relevant config.yaml files
      #   id: check_config
      #   run: |
      #     find . -name "config.yaml"
      #     echo "find above"
      #     # Find all config.yaml files and check for changes next to or below them
      #     while IFS= read -r file; do
      #       dir=$(dirname "$file")
      #       echo  "if grep -q \"$dir\" changed_files.txt; then"
      #       if grep -q "$dir" changed_files.txt; then
      #         echo "Found changed file near $file"
      #         config_files+="$file "
      #       fi
      #     done < <(find . -name "config.yaml" | sed 's|^\./||')

      #     if [ -n "$config_files" ]; then
      #       echo "::set-output name=config_files::$config_files"
      #     fi

      # # Bump version in config.yaml files
      # - name: Bump version in config.yaml
      #   if: steps.check_config.outputs.config_files
      #   run: |
      #     for file in ${{ steps.check_config.outputs.config_files }}; do
      #       current_version=$(yq '.version' "$file")
      #       new_version=$(echo $current_version | awk -F. '{$NF+=1}1' | sed 's/ /./g')
      #       yq  -i ".version |= \"$new_version\"" "$file"
      #       echo "Bumped $file version from $current_version to $new_version"
      #     done

      # Commit the updated files
      - name: Commit changes
        if: steps.check_config.outputs.config_files
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ steps.check_config.outputs.config_files }}
          git commit -m "Bump version in config.yaml files"
          git push
